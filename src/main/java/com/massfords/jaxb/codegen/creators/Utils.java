package com.massfords.jaxb.codegen.creators;

import com.massfords.jaxb.codegen.CodeGenOptions;
import com.sun.codemodel.JAnnotationUse;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JGenerifiable;
import com.sun.codemodel.JTypeVar;
import jakarta.annotation.Generated;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NonNull;
import lombok.Value;

@AllArgsConstructor(access = AccessLevel.PRIVATE)
public final class Utils {
    public static GenerifyResults generify(JGenerifiable generifiable, CodeGenOptions options) {
        GenerifyResults.GenerifyResultsBuilder builder =  GenerifyResults.builder();
        builder.returnType(generifiable.generify("R"));
        builder.exceptionType(generifiable.generify("E", Throwable.class));
        if (options.isIncludeArg()) {
            builder.argType(generifiable.generify("A"));
        }
        return builder.build();
    }

    @Value
    @Builder
    public static class GenerifyResults {
        @NonNull
        JTypeVar returnType;
        @NonNull
        JTypeVar exceptionType;
        JTypeVar argType;
    }

    public static void annotateGenerated(JDefinedClass output, CodeGenOptions options) {
        JAnnotationUse annotationUse = options.isUseLegacyImports() ?
                output.annotate(javax.annotation.Generated.class) :
                output.annotate(Generated.class);
        annotationUse.param("value", "Generated by jaxb-visitor");
    }

}
