package org.example.visitor;

import jakarta.annotation.Generated;
import org.example.imported.ImportedData;
import org.example.imported.ImportedType;
import org.example.simple.ChoiceElement;
import org.example.simple.ComplexObject;
import org.example.simple.HasJAXBElement;
import org.example.simple.Problem;
import org.example.simple.Recursive;
import org.example.simple.TSimpleRequest;
import org.example.simple.TSimpleResponse;

@Generated("Generated by jaxb-visitor")
public class TraversingVisitor<R, E extends Throwable, A>
        implements Visitor<R, E, A> {

    private boolean traverseFirst;
    private Visitor<R, E, A> visitor;
    private Traverser<E, A> traverser;
    private TraversingVisitorProgressMonitor progressMonitor;

    public TraversingVisitor(Traverser<E, A> aTraverser, Visitor<R, E, A> aVisitor) {
        traverser = aTraverser;
        visitor = aVisitor;
    }

    public boolean getTraverseFirst() {
        return traverseFirst;
    }

    public void setTraverseFirst(boolean aVisitor) {
        traverseFirst = aVisitor;
    }

    public Visitor<R, E, A> getVisitor() {
        return visitor;
    }

    public void setVisitor(Visitor<R, E, A> aVisitor) {
        visitor = aVisitor;
    }

    public Traverser<E, A> getTraverser() {
        return traverser;
    }

    public void setTraverser(Traverser<E, A> aVisitor) {
        traverser = aVisitor;
    }

    public TraversingVisitorProgressMonitor getProgressMonitor() {
        return progressMonitor;
    }

    public void setProgressMonitor(TraversingVisitorProgressMonitor aVisitor) {
        progressMonitor = aVisitor;
    }

    @Override
    public R visit(ImportedData aBean, A arg)
            throws E {
        if (traverseFirst == true) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        R returnVal;
        returnVal = aBean.accept(getVisitor(), arg);
        if (progressMonitor != null) {
            progressMonitor.visited(aBean);
        }
        if (traverseFirst == false) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        return returnVal;
    }

    @Override
    public R visit(ImportedType aBean, A arg)
            throws E {
        if (traverseFirst == true) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        R returnVal;
        returnVal = aBean.accept(getVisitor(), arg);
        if (progressMonitor != null) {
            progressMonitor.visited(aBean);
        }
        if (traverseFirst == false) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        return returnVal;
    }

    @Override
    public R visit(ImportedType.Message aBean, A arg)
            throws E {
        if (traverseFirst == true) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        R returnVal;
        returnVal = aBean.accept(getVisitor(), arg);
        if (progressMonitor != null) {
            progressMonitor.visited(aBean);
        }
        if (traverseFirst == false) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        return returnVal;
    }

    @Override
    public R visit(ChoiceElement aBean, A arg)
            throws E {
        if (traverseFirst == true) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        R returnVal;
        returnVal = aBean.accept(getVisitor(), arg);
        if (progressMonitor != null) {
            progressMonitor.visited(aBean);
        }
        if (traverseFirst == false) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        return returnVal;
    }

    @Override
    public R visit(ComplexObject aBean, A arg)
            throws E {
        if (traverseFirst == true) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        R returnVal;
        returnVal = aBean.accept(getVisitor(), arg);
        if (progressMonitor != null) {
            progressMonitor.visited(aBean);
        }
        if (traverseFirst == false) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        return returnVal;
    }

    @Override
    public R visit(ComplexObject.LocalElement aBean, A arg)
            throws E {
        if (traverseFirst == true) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        R returnVal;
        returnVal = aBean.accept(getVisitor(), arg);
        if (progressMonitor != null) {
            progressMonitor.visited(aBean);
        }
        if (traverseFirst == false) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        return returnVal;
    }

    @Override
    public R visit(HasJAXBElement aBean, A arg)
            throws E {
        if (traverseFirst == true) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        R returnVal;
        returnVal = aBean.accept(getVisitor(), arg);
        if (progressMonitor != null) {
            progressMonitor.visited(aBean);
        }
        if (traverseFirst == false) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        return returnVal;
    }

    @Override
    public R visit(Problem aBean, A arg)
            throws E {
        if (traverseFirst == true) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        R returnVal;
        returnVal = aBean.accept(getVisitor(), arg);
        if (progressMonitor != null) {
            progressMonitor.visited(aBean);
        }
        if (traverseFirst == false) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        return returnVal;
    }

    @Override
    public R visit(Recursive aBean, A arg)
            throws E {
        if (traverseFirst == true) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        R returnVal;
        returnVal = aBean.accept(getVisitor(), arg);
        if (progressMonitor != null) {
            progressMonitor.visited(aBean);
        }
        if (traverseFirst == false) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        return returnVal;
    }

    @Override
    public R visit(TSimpleRequest aBean, A arg)
            throws E {
        if (traverseFirst == true) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        R returnVal;
        returnVal = aBean.accept(getVisitor(), arg);
        if (progressMonitor != null) {
            progressMonitor.visited(aBean);
        }
        if (traverseFirst == false) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        return returnVal;
    }

    @Override
    public R visit(TSimpleResponse aBean, A arg)
            throws E {
        if (traverseFirst == true) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        R returnVal;
        returnVal = aBean.accept(getVisitor(), arg);
        if (progressMonitor != null) {
            progressMonitor.visited(aBean);
        }
        if (traverseFirst == false) {
            getTraverser().traverse(aBean, this, arg);
            if (progressMonitor != null) {
                progressMonitor.traversed(aBean);
            }
        }
        return returnVal;
    }

}
